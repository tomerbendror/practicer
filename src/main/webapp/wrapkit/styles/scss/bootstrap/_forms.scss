//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  // Chrome and Firefox set a `min-width: -webkit-min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: $line-height-computed;
  font-size: ($font-size-base * 1.5);
  line-height: inherit;
  color: $legend-color;
  border: 0;
  border-bottom: 1px solid $legend-border-color;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;

  small{
    color: $text-muted;
  }
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  @include box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  @include tab-focus();
}

// Adjust output element
output {
  display: block;
  padding-top: ($padding-base-vertical + 1);
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display: block;
  width: 100%;
  height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: $padding-base-vertical $padding-base-horizontal;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid $input-border;
  border-radius: $input-border-radius;
  // @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
  @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus();

  // Placeholder
  @include placeholder();

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }

  // [converter] extracted textarea& to textarea.form-control
}

// Reset height for `textarea`s
textarea.form-control {
  height: auto;
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}


// Special styles for iOS date input
//
// In Mobile Safari, date inputs require a pixel line-height that matches the
// given height of the input. Since this fucks up everything else, we have to
// appropriately reset it for Internet Explorer and the size variations.

input[type="date"],
input[type="time"],
input[type="datetime-local"],
input[type="month"] {
  line-height: $input-height-base;
  // IE8+ misaligns the text within date inputs, so we reset
  line-height: $line-height-base #{\0};

  &.input-sm {
    line-height: $input-height-small;
  }
  &.input-lg {
    line-height: $input-height-large;
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: 15px;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  display: block;
  min-height: $line-height-computed; // clear the floating input if there is no label text
  margin-top: 10px;
  margin-bottom: 10px;

  label {
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  float: left;
  margin-left: -20px;
}
.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"],
.radio,
.radio-inline,
.checkbox,
.checkbox-inline {
  height: auto;
  &[disabled],
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.

@include input-size('.input-sm', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $line-height-small, $border-radius-small);

@include input-size('.input-lg', $input-height-large, $padding-large-vertical, $padding-large-horizontal, $font-size-large, $line-height-large, $border-radius-large);


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control {
    padding-right: ($input-height-base * 1.25);
  }
  // Feedback icon (requires .glyphicon classes)
  .form-control-feedback {
    position: absolute; // confict with .glyphicon
    top: ($line-height-computed + 5); // Height of the `label` and its margin
    right: 0;
    z-index: 2; // Ensure icon is above input groups
    display: block; // confict with .glyphicon
    width: $input-height-base;
    height: $input-height-base;
    line-height: $input-height-base; // confict with .glyphicon
    text-align: center;
  }
}
.input-lg + .form-control-feedback {
  width: $input-height-large;
  height: $input-height-large;
  line-height: $input-height-large;
}
.input-sm + .form-control-feedback {
  width: $input-height-small;
  height: $input-height-small;
  line-height: $input-height-small;
}




// Reposition feedback icon if label is hidden with "screenreader only" state
.has-feedback label.sr-only ~ .form-control-feedback {
  top: 0;
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  margin-bottom: 0; // Remove default margin from `p`
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin-top: 5px;
  margin-bottom: 10px;
  color: $gray; // lighten the text some for contrast
}



// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

.form-inline {

  // Kick in the inline
  @media (min-width: $screen-sm-min) {
    // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    .input-group {
      display: inline-table;
      vertical-align: middle;

      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    }

    // Input groups need that 100% width though
    .input-group > .form-control {
      width: 100%;
    }

    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match (which also avoids
    // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      padding-left: 0;
      vertical-align: middle;
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      float: none;
      margin-left: 0;
    }

    // Validation states
    //
    // Reposition the icon because it's now within a grid column and columns have
    // `position: relative;` on them. Also accounts for the grid gutter padding.
    .has-feedback .form-control-feedback {
      top: 0;
    }
  }
}


// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: ($padding-base-vertical + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: 20px; //($line-height-computed + ($padding-base-vertical + 1));
  }

  // Make form groups behave like rows
  .form-group {
    @include make-row();
  }

  .form-control-static {
    padding-top: ($padding-base-vertical + 1);
    padding-bottom: ($padding-base-vertical + 1);
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: $screen-sm-min) {
    .control-label {
      text-align: right;
      margin-bottom: 0;
      padding-top: ($padding-base-vertical + 1); // Default padding plus a border
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    top: 0;
    right: ($grid-gutter-width / 2);
  }
}

// Form bordered
.panel > .form-bordered .form-group{
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}
.form-bordered:not(.form-inline) .form-group {
  border-bottom: 1px solid $border-color;
  padding-bottom: ($grid-gutter-width / 2);
}
.form-bordered.form-horizontal .form-group {
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}
.form-bordered:not(.form-inline) .form-group:last-child {
  border-bottom: none;
  padding-bottom: 0;
}



/* NICE CHECKBOX & RADIO BUTTON */
/* Base for label styling */
.nice-checkbox,
.nice-radio{
    position: relative;
    display: block;
    min-height: $line-height-computed;
    margin-top: 10px;
    margin-bottom: 5px;
}
.nice-checkbox + .nice-checkbox,
.nice-radio + .nice-radio{
  margin-top: 5px;
}

.nice-checkbox-inline,
.nice-radio-inline{
  display: inline-block;

  input + label:before{
    top: 1px;
  }
}
.nice-checkbox-inline + .nice-checkbox-inline,
.nice-checkbox-inline + .nice-radio-inline,
.nice-radio-inline + .nice-radio-inline,
.nice-radio-inline + .nice-checkbox-inline{
  margin-left: 10px;
}

.wrapkit-content-rtl{
  .nice-checkbox-inline,
  .nice-radio-inline{
      margin-left: 10px;
  }
}

.nice-checkbox > [type="checkbox"],
.nice-radio > [type="radio"]{
  position: absolute;
  opacity: 0;
  z-index: -1;
}
.nice-checkbox > label,
.nice-radio > label{
  margin-bottom: 0;
}
.nice-checkbox > [type="checkbox"]:not(:checked) + label,
.nice-checkbox > [type="checkbox"]:checked + label,
.nice-radio > [type="radio"]:not(:checked) + label,
.nice-radio > [type="radio"]:checked + label {
    position: relative;
    padding-left: 20px;
    color: inherit;
    line-height: $line-height-computed;
    z-index: 1;
    font-weight: normal;
    cursor: pointer;
}
.nice-checkbox > label:before,
.nice-radio > label:before{
    position: absolute;
    z-index: 2;
    left: 0;
    font-size: $font-size-base;
    color: $gray;
    font-family: 'FontAwesome';
    font-style: normal;
    font-weight: normal;
    line-height: $line-height-computed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    cursor: default !important;

    -webkit-transition: all .3s ease;
    -moz-transition: all .3s ease;
    -ms-transition: all .3s ease;
    -o-transition: all .3s ease;
    transition: all .3s ease;
}
/* checkbox aspect */
.nice-checkbox > [type="checkbox"]:not(:checked) + label:before,
.nice-checkbox:hover > [type="checkbox"]:disabled:not(:checked) + label:before{
    content: '\f0c8';
}
/* checked mark aspect */
.nice-checkbox > [type="checkbox"]:checked + label:before {
    content: '\f14a';
    color: $text-color;
}
.nice-checkbox > .checkbox-o[type="checkbox"]:checked + label:before {
    content: '\f046';
}
/* RADIO */
/* radio aspect */
.nice-radio > [type="radio"]:not(:checked) + label:before,
.nice-radio:hover > [type="radio"]:disabled:not(:checked) + label:before{
    content: '\f111';
}
/* checked mark aspect */
.nice-radio > [type="radio"]:checked + label:before {
    content: '\f192';
    color: $text-color;
}
.nice-radio > .radio-o[type="radio"]:checked + label:before {
    content: '\f057';
}

// focus & hover state
.nice-checkbox > [type="checkbox"]:focus + label:before,
.nice-checkbox:hover > label:before,
.nice-radio > [type="radio"]:focus + label:before,
.nice-radio:hover > label:before{
    color: $state-info-text !important;
}
// disabled checkbox
.nice-checkbox > [type="checkbox"]:disabled + label:before,
.nice-checkbox > [type="checkbox"]:disabled + label,
.nice-checkbox > [type="checkbox"]:disabled + label > [class*="text-"],
.nice-radio > [type="radio"]:disabled + label:before,
.nice-radio > [type="radio"]:disabled + label,
.nice-radio > [type="radio"]:disabled + label > [class*="text-"] {
    color: $gray-light !important;
    cursor: not-allowed;
}
.nice-checkbox > label .fake-addon,
.nice-radio > label .fake-addon{
  position: absolute;
  top: 4px;
  left: 0px;
  height: 12px;
  width: 12px;
}




label.select{
  position: relative;
  margin-bottom: 0;
  display: block;
  width: 100%;
  background-color: $input-bg;
  background-image: none;
  border: 1px solid $input-border;
  border-radius: $input-border-radius;
  @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

  &.select-inline{
    display: inline-block;
    width: auto;
    min-width: 100px;

    > select{
      width: 100%;
    }
  }
  
  &:before{
    position: absolute;
    right: $padding-base-horizontal;
    width: 19px;  // disabled default arrow on non -webkit- browser
    background-color: $input-bg;
    text-align: right;
    font-family: FontAwesome;
    font-style: normal;
    font-weight: normal;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    content: '\f0dc';
    line-height: $input-height-base - 2;
  }
  &.select-o:before{
    content: '\f078';
  }

  &.disabled:before{
    color: $gray-light;
    background-color: $input-bg-disabled;
  }
  
  &.select-multiple{
    max-height: 300px;
    overflow: hidden;
    &:before{
      display: none;
    }
  }

  &.focus{
    border-color: $input-border-focus;
  }

  .fake-addon{
    position: absolute;
    top: 1px;
    right: 1px;
    width: ($padding-base-horizontal * 3);
    height: $input-height-base - 2;
    z-index: -1;
  }
}
label.select > select{
  background-color: transparent;
  width: 100%;
  outline: 0;
  border: none;
  height: $input-height-base - 2;
  padding: ($padding-base-vertical - 1) $padding-base-horizontal;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;

  &[multiple]{
    height: auto;
    padding: 6px 0;
    line-height: auto;
    width: 110%;
  }

  &[disabled],
  &[readonly],
  fieldset[disabled] label.select >  & {
    cursor: not-allowed;
    color: $gray-light;
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }
}

label.select{
  &.select-sm{
    border-radius: $border-radius-small;

    &:before{
      right: $padding-small-horizontal;
      line-height: $input-height-small - 2;
    }

    > select{
      height: $input-height-small - 2;
      padding: ($padding-small-vertical - 1) $padding-small-horizontal;
      font-size: $font-size-small;
      line-height: $line-height-small;
    }
    .fake-addon{
      width: ($padding-small-horizontal * 3);
      height: $input-height-small - 2;
    }
  }

  &.select-lg{
    border-radius: $border-radius-large;

    &:before{
      right: $padding-large-horizontal;
      line-height: $input-height-large - 2;
    }

    > select{
      height: $input-height-large - 2;
      padding: ($padding-large-vertical - 1) $padding-large-horizontal;
      font-size: $font-size-large;
      line-height: $line-height-large;
    }
    .fake-addon{
      width: ($padding-large-horizontal * 3);
      height: $input-height-large - 2;
    }
  }
}

.wrapkit-content-rtl label.select{
  &:before{
    left: $padding-base-horizontal;
    right: auto;
    text-align: left;
  }

  &.select-sm:before{
    left: $padding-small-horizontal;
    right: auto;
  }
  &.select-lg:before{
    left: $padding-large-horizontal;
    right: auto;
  }
}